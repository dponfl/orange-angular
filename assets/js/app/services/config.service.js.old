(function () {
  "use strict";

  angular.module('OrangeClient')
    .service('GeneralConfigService', GeneralConfigService);

  /**
   * Service to manage home application params
   */
  GeneralConfigService.$inject = ['$rootScope', 'oCity', 'oDeal', 'oObj',
    'oRoom', 'oTag', 'lodash', '$q', '$log'];
  function GeneralConfigService($rootScope, oCity, oDeal, oObj,
                                oRoom, oTag, lodash, $q, $log) {


    // todo: delete
    console.log('GeneralConfigService');


    var _ = lodash;
    var self = {
      orangeConfig: {},
      setLang: _setLang,
      getLang: _getLang,
      getCities: _getCities,
      getDeals: _getDeals,
      getObj: _getObj,
      getRoom: _getRoom,
      getTag: _getTag,
      getCitiesSync: _getCitiesSync,
      getDealsSync: _getDealsSync,
      getObjSync: _getObjSync,
      getRoomSync: _getRoomSync,
      getTagSync: _getTagSync,
      setHost: _setHost,
      tokens: _setTokens(),
      t: _translate,
    };

    /**
     * Initialising of app configs
     */

    self.setHost();
    self.setLang();
    self.getCitiesSync();
    self.getDealsSync();
    self.getObjSync();
    self.getRoomSync();
    self.getTagSync();

    return self;

/*
    $q.all([self.getCities(), self.getDeals(), self.getObj(),
      self.getRoom(), self.getTag()])
      .then(function () {
        self.setLang();
        return self;
      })
      .catch(function (err) {
        // todo: change by Log
        $log.warn('Error...');
        $log.error(err);
        return;
      });
*/


    function _setTokens() {
      return {
        en: {
          'BOOKING_SUCCESS_TITLE': 'Thank you for the booking!',
          'BOOKING_SUCCESS_BODY_1': 'Your request for booking object #',
          'BOOKING_SUCCESS_BODY_2': ' was successfully submitted. We\'ll contact you shortly.',

          'BOOKING_ERROR_TITLE': 'Oops...',
          'BOOKING_ERROR_BODY_1': 'Unfortunately your request for booking object #',
          'BOOKING_ERROR_BODY_2': ' was not submitted. Please try again later or contact admin.',

        },
        ru: {
          'BOOKING_SUCCESS_TITLE': 'Благодарим за бронирование!',
          'BOOKING_SUCCESS_BODY_1': 'Ваш запрос на бронирование объекта №',
          'BOOKING_SUCCESS_BODY_2': ' был успешно отправлен. Мы свяжемся с вами в ближайшее время.',

          'BOOKING_ERROR_TITLE': 'Небольшие проблемы...',
          'BOOKING_ERROR_BODY_1': 'К сожалению ваш запрос на бронирование объекта #',
          'BOOKING_ERROR_BODY_2': ' не бвл отправлен. Повторите попытку немного позже или ' +
          'свяжитесь с администратором сайта.',

        },
      }
    }

    function _translate(key) {
      return self.tokens[$rootScope.lang][key] || '';
    } // _translate

    function _setHost() {
      self.orangeConfig.host = 'http://localhost:1337';
    }


    function _setLang(lang) {
      // console.log('Setting lang=' + lang);
      $rootScope.lang = lang || 'en';
    } // _setLang

    function _getLang() {
      return $rootScope.lang || 'en';
    }

    /**
     * Exclude elements wish show = 0 from select list
     */
    function _excludeEmptyElem(arr) {
      _.forEach(arr, function (elem) {
        _.remove(elem, function (innerElem) {
          return innerElem == -1;
        })
      })
    } // _excludeEmptyElem

    /**
     * City
     */

    function _mapCityData(elem) {
      if (!_.isArray(self.orangeConfig.cityList[elem.lang]))
        self.orangeConfig.cityList[elem.lang] = [];
      if (elem.show == 0) {
        self.orangeConfig.cityList[elem.lang][elem.order] = -1;
      } else {
        self.orangeConfig.cityList[elem.lang][elem.order] = {};
        self.orangeConfig.cityList[elem.lang][elem.order]['key'] = elem.key;
        self.orangeConfig.cityList[elem.lang][elem.order]['val'] = elem.city;
      }

    } // _mapCityData

    function _getCities() {
      var deferred = $q.defer();
      oCity.query(function (data) {
          // console.log('!!! Success...');
          // console.dir(data);

          self.orangeConfig.cityList = {};

          if (!_.isArray(data)) deferred.reject(Error('Cities data is not an array'));

          data.map(_mapCityData);

          _excludeEmptyElem(self.orangeConfig.cityList);

          // console.log('self.orangeConfig:');
          // console.dir(self.orangeConfig);
          deferred.resolve();
        });

      return deferred.promise;
    } // _getCities

    function _getCitiesSync() {
      oCity.query.exec(function (err, data) {
          // console.log('!!! Success...');
          // console.dir(data);

          self.orangeConfig.cityList = {};

          if (err || !_.isArray(data)) {
            // todo: put in logger
            console.log('Error or Cities data is not an array');
            return;
          }

          data.map(_mapCityData);

          _excludeEmptyElem(self.orangeConfig.cityList);

          // console.log('self.orangeConfig:');
          // console.dir(self.orangeConfig);
        });
    } // _getCitiesSync

    /**
     * Deal
     */

    function _mapDealData(elem) {
      if (!_.isArray(self.orangeConfig.dealList[elem.lang]))
        self.orangeConfig.dealList[elem.lang] = [];
      if (elem.show == 0) {
        self.orangeConfig.dealList[elem.lang][elem.order] = -1;
      } else {
        self.orangeConfig.dealList[elem.lang][elem.order] = {};
        self.orangeConfig.dealList[elem.lang][elem.order]['key'] = elem.key;
        self.orangeConfig.dealList[elem.lang][elem.order]['val'] = elem.deal;
      }

    } // _mapDealData

    function _getDeals() {
      var deferred = $q.defer();
      oDeal.query(function (data) {
          // console.log('!!! Success...');
          // console.dir(data);

          self.orangeConfig.dealList = {};

          if (!_.isArray(data)) deferred.reject(Error('Deals data is not an array'));

          data.map(_mapDealData);

          _excludeEmptyElem(self.orangeConfig.dealList);

          // console.log('self.orangeConfig:');
          // console.dir(self.orangeConfig);

          deferred.resolve();
        });
      return deferred.promise;
    } // _getDeals

    function _getDealsSync() {
      oDeal.query.exec(function (err, data) {
          // console.log('!!! Success...');
          // console.dir(data);

          self.orangeConfig.dealList = {};

          if (err || !_.isArray(data)) {
            // todo: put in logger
            console.log('Error or Deals data is not an array');
            return;
          }

          data.map(_mapDealData);

          _excludeEmptyElem(self.orangeConfig.dealList);

          // console.log('self.orangeConfig:');
          // console.dir(self.orangeConfig);
        });
    } // _getDealsSync

    /**
     * Object
     */

    function _mapObjData(elem) {
      if (!_.isArray(self.orangeConfig.objList[elem.lang]))
        self.orangeConfig.objList[elem.lang] = [];
      if (elem.show == 0) {
        self.orangeConfig.objList[elem.lang][elem.order] = -1;
      } else {
        self.orangeConfig.objList[elem.lang][elem.order] = {};
        self.orangeConfig.objList[elem.lang][elem.order]['key'] = elem.key;
        self.orangeConfig.objList[elem.lang][elem.order]['val'] = elem.obj;
      }

    } // _mapObjData

    function _getObj() {
      var deferred = $q.defer();
      oObj.query(function (data) {
          // console.log('!!! Success...');
          // console.dir(data);

          self.orangeConfig.objList = {};

          if (!_.isArray(data)) deferred.reject(Error('Obj data is not an array'));

          data.map(_mapObjData);

          _excludeEmptyElem(self.orangeConfig.objList);

          // console.log('self.orangeConfig:');
          // console.dir(self.orangeConfig);

          deferred.resolve();
        });

      return deferred.promise;
    } // _getObjects

    function _getObjSync() {
      oObj.query.exec(function (err, data) {
          // console.log('!!! Success...');
          // console.dir(data);

          self.orangeConfig.objList = {};

          if (err || !_.isArray(data)) {

            // todo: put to logger
            console.log('Error or Obj data is not an array');
            return;
          }

          data.map(_mapObjData);

          _excludeEmptyElem(self.orangeConfig.objList);

          // console.log('self.orangeConfig:');
          // console.dir(self.orangeConfig);

        });

    } // _getObjectsSync

    /**
     * Room
     */

    function _mapRoomData(elem) {
      if (!_.isArray(self.orangeConfig.roomList[elem.lang]))
        self.orangeConfig.roomList[elem.lang] = [];
      if (elem.show == 0) {
        self.orangeConfig.roomList[elem.lang][elem.order] = -1;
      } else {
        self.orangeConfig.roomList[elem.lang][elem.order] = {};
        self.orangeConfig.roomList[elem.lang][elem.order]['key'] = elem.key;
        self.orangeConfig.roomList[elem.lang][elem.order]['val'] = elem.room;
      }

    } // _mapRoomData

    function _getRoom() {
      var deferred = $q.defer();
      oRoom.query(function (data) {
          // console.log('!!! Success...');
          // console.dir(data);

          self.orangeConfig.roomList = {};

          if (!_.isArray(data)) deferred.reject(Error('Room data is not an array'));

          data.map(_mapRoomData);

          _excludeEmptyElem(self.orangeConfig.roomList);

          // console.log('self.orangeConfig:');
          // console.dir(self.orangeConfig);

          deferred.resolve();
        });

      return deferred.promise;
    } // _getRoom

    function _getRoomSync() {
      oRoom.query.exec(function (err, data) {
          // console.log('!!! Success...');
          // console.dir(data);

          self.orangeConfig.roomList = {};

          if (err || !_.isArray(data)) {

            // todo: put in logger
            console.log('Error or Room data is not an array');
            return;
          }

          data.map(_mapRoomData);

          _excludeEmptyElem(self.orangeConfig.roomList);

          // console.log('self.orangeConfig:');
          // console.dir(self.orangeConfig);

        });

    } // _getRoomSync

    /**
     * Tag
     */

    function _getTag() {
      var deferred = $q.defer();
      oTag.query(function (data) {
          // console.log('!!! Success...');
          // console.dir(data);

          self.orangeConfig.tagList = {};

          if (!_.isArray(data)) deferred.reject(Error('Tag data is not an array'));

          for (var i = 0; i < data.length; i++) {
            if (!_.isArray(self.orangeConfig.tagList[data[i].lang]))
              self.orangeConfig.tagList[data[i].lang] = [];
            self.orangeConfig.tagList[data[i].lang].push({key: data[i].key, val: data[i].tag})
          }

          // console.log('self.orangeConfig.tagList:');
          // console.dir(self.orangeConfig.tagList);

          deferred.resolve();
        })

      return deferred.promise;
    } // _getTag

    function _getTagSync() {
      oTag.query.exec(function (err, data) {
          // console.log('!!! Success...');
          // console.dir(data);

          self.orangeConfig.tagList = {};

          if (err || !_.isArray(data)) {

            // todo: put in logger
            console.log('Error or Tag data is not an array');
            return;
          }

          for (var i = 0; i < data.length; i++) {
            if (!_.isArray(self.orangeConfig.tagList[data[i].lang]))
              self.orangeConfig.tagList[data[i].lang] = [];
            self.orangeConfig.tagList[data[i].lang].push({key: data[i].key, val: data[i].tag})
          }

          // console.log('self.orangeConfig.tagList:');
          // console.dir(self.orangeConfig.tagList);

        })


    } // _getTagSync

  } // GeneralConfigService
})();